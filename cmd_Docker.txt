//Docker是容器的一种实现，是容器化的解决方案和平台，容器是一种虚拟化技术
//Docker由客户端(Client)，服务端(Docker Host)，仓库(Registry)组成，分别对应镜像、容器和仓库
//镜像是一个只读模板，可用来创建容器；容器是Docker的一个运行实例，提供了独立的可移植环境；Docker仓库存放Docker镜像
//常用的Docker仓库是DockerHub
//容器化就是将应用程序打包成容器然后在容器中运行应用程序的过程，分为创建Dockerfile、用其构建镜像、用镜像创建和运行容器三步
//Dockerfile是一个文本文件，包含一条条指令告诉Docker如何构建镜像，镜像中包括应用程序执行的所有命令(依赖和配置)
//镜像是按层次来构建的，每一层都是基于上一层的，要先指定一个基础镜像，在基础镜像基础上添加应用程序

Dockerfile指令：
FROM [baseImage]				//指定基础镜像
COPY <sourse> <dest>			//将应用程序复制进镜像
CMD ["node", "/index.js"]			//执行命令运行应用程序，也可以写成：CMD node /index.js
ADD							//高级复制，可是URL及压缩文件(自动解压)
ENV								//环境变量
EXPOSE							//暴露端口
WORKDIR [path]					//用于指定工作目录
VOLUME [path]					//用于定义匿名卷

Docker指令：
docker version					//显示docker版本信息，docker启动后可看到Client和Server的信息，docker -v显示简略信息
docker info						//查看系统信息
docker --help					//查看帮助文档，
docker login/logout				//登录/退出DockerHub
systemctl stat docker				//启动docker
systemctl stop docker			//关闭docker
systemctl enable docker			//设置开机启动
service docker restart				//重启服务
service docker stop				//关闭服务


docker build -t <name> .			//构建镜像，可在镜像名后加上冒号版本号来标记版本号，.表示当前目录(Dockerfile所在的目录)
docker image ls					//查看所有镜像，也可以用docker images
docker search <image>			//检索镜像
docker pull <image>				//拉取image
docker push <image>			//把镜像推送到远程仓库
docker image rm <image>		//删除镜像，也可以用docker rmi
docker save [image] > FILE		//导出镜像，也可以用docker save [image] -o FILE /
docker load -i FILE				//导入镜像
docker history <image>			//查看镜像历史
docker image prune				//删除不再使用的镜像
docker commit [container] [image]	//从容器创建镜像

docker create [images]
docker run [images]				//创建并启动容器，然后运行镜像

docker start [container]			//启动容器
docker restart [container]			//重启容器
docker stop [container]			//终止容器
docker ps /						//列出正在运行的容器，也可以用docker container ls，加上-a列出所有容器
docker attach [container]			//以交互模式进入容器，也可以用docker exec -it [container] bash /
docker export [container] > FILE	//导出容器，也可以用docker export [container] -o FILE /
docker import FILE				//导入容器快照
docker logs [container]			//查看日志
docker rm [container]	 /			//删除容器，也可以用docker container rm [container]
docker top [container]			//显示容器内进程
docker stats [container]			//显示容器资源使⽤情况
docker diff [container]			//显示容器内的变化
docker cp [FILE] [container]:[path]	//复制本地⽂件到容器内的指定路径

docker volume create [volume]	//创建⼀个数据卷
docker volume ls					//查看数据卷
docker volume inspect [volume]	//查看数据卷详细信息
docker volume rm [volume]		//删除数据卷
docker volume prune				//删除所有未使⽤的数据卷

docker plugin ls					//列出插件
docker plugin install [plugin]		//安装插件
docker plugin enable [plugin]		//启⽤插件
docker plugin disable [plugin]		//禁⽤插件
docker plugin rm [plugin]			//卸载插件

docker network ls								//列出可⽤⽹络
docker network inspect [network]					//查看⽹络详细信息
docker network create [network]					//创建⼀个新的⽹络
docker network rm [network]						//删除⼀个⽹络
docker network connect [network] [container]		//将容器连接到⽹络
docker network disconnect [network] [container]	//将容器从⽹络断开

docker run --name [name] [image]					//创建,运⾏并命名容器
docker run -d [image]								//创建⼀个容器并后台运⾏
docker run  -p [hostPort]:[containerPort] [image]	//创建⼀个容器并指定端⼝映射
docker run -P [image]								//创建⼀个容器并指定端⼝映射（随机分配）
docker run  -e [key=value] [image]					//创建⼀个容器并指定环境变量
docker run -w [PATH] [image]						//创建⼀个容器并指定⼯作⽬录
docker run  -name [name] [image]					//创建⼀个容器并指定容器名称
docker run [image] [command]					//创建⼀个容器并在容器中执⾏命令（交互模式）
docker run -it nginx:latest /bin/bash				//使⽤镜像nginx:latest来启动⼀个容器，并在容器内执⾏交互式bash shell
docker run  -it -p 3316:3306 -v /data:/data -d mysql:latest
//创建⼀个mysql容器，后台模式启动，主机3316端口映射到容器3306端⼝，主机/data⽬录映射到容器/data⽬录
docker run  -d -p [hostPort]:[containerPort] -e [key=value]  -w [PATH] --name [name] [image]
//创建⼀个容器，并指定容器名称、后台运⾏、端⼝映射、环境变量和⼯作⽬录
