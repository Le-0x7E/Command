git config --global user.name "name"
git config --global user.email email
git config --global credential.helper store			//保存用户信息
git config --global --list							//查看用户信息

git init			//创建仓库
git init demo
git clone <url>

git status				//查看仓库状态，可加-s简化输出，简化后第一列为暂存区状态，第二列为工作区状态
git add *.txt				//把所有txt文件添加到暂存区
git add .					//把当前目录所有文件添加到暂存区
git ls-files				//查看暂存区内容
git rm file.txt				//从工作区和暂存区删除file.txt
git rm --cached file.txt	//从暂存区删除文件
git rm -r*				//递归删除某目录下所有子目录和文件，删除后记得提交
git commit -m xxx		//提交，说明信息为xxx
git commit -a -m xxx		//添加暂存并提交
git log					//查看提交记录，可加--oneline输出简洁化
git reset	 --soft id			//回退到id版本，保留工作区和暂存区所有修改内容
git reset	 --hard HEAD~	//回退到上一版本，丢弃工作区和暂存区所有修改内容
git reset	 --mixed id		//回退到id版本，保留工作区并丢弃暂存区修改内容，默认
git reflog				//查看操作历史
git diff					//比较工作区和暂存区文件差异
git diff HEAD				//比较工作区和版本库文件差异
git diff --cached			//比较暂存区和版本库文件差异
git diff id id				//比较两个版本的差异，可换成分支名比较分支差异
git diff HEAD~1 HEAD	//比较当前版本和上一个版本的差异，后面加文件名则只比较该文件的变化
echo file > .gitignore		//把file添加进.gitignore文件中，git便会忽略此文件，可用通配符，还有更多匹配规则

git push										//把本地仓库的修改内容推送给远程仓库
git pull <远程仓库名> <远程分支>:<本地分支>	//从远程仓库拉取分支并自动合并
git fetch

git remote add <shortname> <url>			//添加一个远程仓库
git branch -M main							//指定分支名称为main
git push -u origin main						//把本地的main分支和远程的origin分支关联起来并推送
git remote -v								//查看关联的远程仓库
git remote remove <remote-name>			//移除关联的远程仓库

git branch									//查看仓库所有分支
git branch  <name>							//创建名为name的分支
git switch  <name>							//切换到name分支，也可以用git checkout
git merge <name>							//把name分支合并至当前所在的分支
git merge --abort							//合并出现冲突后终止合并，若不想终止则修改冲突后commit
git log --graph --oneline --decorate --all		//显示分支图
git branch -d name							//删除name分支，-d表示删除已经合并完的分支，-D可以强制删除未合并的
git checkout -b <name> id					//恢复删除的name分支，id为name分支的某个提交记录
git rebase <branch-name>					//当前分支变基到目标分支，把公共结点后当前分支接在目标分支最新记录后
git tag										//标记版本号